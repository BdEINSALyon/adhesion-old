<?php

namespace Cva\GestionMembreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ProduitRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{

    public function getAvailableProductsFor(Etudiant $student)
    {
        // Select only product which has not be bought by this student
        $boughtProducts = array();
        /** @var Payment[] $payments */
        $payments = $student->getPayments();
        foreach ($payments as $payment) {
            $boughtProducts[] = $payment->getProduct()->getId();
        }

        // The query to achieve what we are looking for
        $qb = $this->createQueryBuilder('p')->where("p.active = true");
        if (count($boughtProducts) > 0) { // This request bug if $boughtProducts is empty
            $qb->andWhere("p.id NOT IN (?2)")->setParameter(2, $boughtProducts);
        }
        return $this->to_array_result($qb->getQuery()->getResult(Query::HYDRATE_OBJECT));
    }

    /**
     * @param $result
     * @return array
     */
    private function to_array_result($result)
    {
        if (!$result) {
            return array();
        } elseif (is_array($result)) {
            return $result;
        } else {
            return array($result);
        }
    }

    /**
     * @return Produit[]
     */
    public function getCurrentVA()
    {
        $result = $this->createQueryBuilder('p')->where("p.id IN (?1)")->getQuery()
            ->setParameter(1, $this->getCurrentVAIds())->getResult();
        return $this->to_array_result($result);
    }

    public function getCurrentVAIds()
    {
        $config = $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("cva.produitVA", "");
        return explode(",", $config);
    }

    public function getCurrentWEIIds()
    {
        return $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("wei.produitInscriptionWEI", "");
    }

    /**
     * @return Produit
     */
    public function getCurrentWEIRemboursement()
    {
        return $this->find($this->getCurrentWEIRemboursementIds());
    }

    /**
     * @return Produit
     */
    public function getCurrentWEI()
    {
        return $this->find($this->getCurrentWEIIds());
    }

    /**
     * @return Produit
     */
    public function getCurrentWEIPreInscription()
    {
        return $this->find($this->getCurrentPreWEIIds());
    }

    /**
     * @return Produit
     */
    public function getCurrentWEIWaiting()
    {
        return $this->find($this->getCurrentWaitingWEIIds());
    }

    /**
     * @return Produit
     */
    public function getCurrentWEIPreWaiting()
    {
        return $this->find($this->getCurrentPreWaitingWEIIds());
    }

    public function getCurrentWEIRemboursementIds()
    {
        return $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("wei.produitRemboursementWEI", "");
    }

    public function getCurrentPreWEIIds()
    {
        return $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("wei.produitPreInscritsWEI", "");
    }

    public function getAvailableProducts()
    {
        $qb = $this->createQueryBuilder('p')->where("p.active = true");
        return $this->to_array_result($qb->getQuery()->getResult(Query::HYDRATE_OBJECT));
    }

    public function getWaitingProductFor(Produit $produit)
    {
        $id = $produit->getId();
        switch ($id) {
            case $this->getCurrentWEIIds():
                return $this->getCurrentWEIWaiting();
            case $this->getCurrentPreWEIIds():
                return $this->getCurrentWEIPreWaiting();
            default:
                return null;
        }
    }

    public function getCurrentWaitingWEIIds()
    {
        return $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("wei.produitListeWEI", "");
    }

    public function getCurrentPreWaitingWEIIds()
    {
        return $this->getEntityManager()->getRepository("BdEMainBundle:Config")->get("wei.produitListePreWEI", "");
    }

    /**
     * Retrieve current VA product for a given type.
     * @param string $category Category of product, A is for all, B is for first years and K is without KFet
     * @return Produit
     */
    public function getVAProduct($category = 'A'){
        $products = $this->getCurrentVA();
        foreach ($products as $p) {
            $name = $p->getName();
            if(substr($name, strlen($name)-1, strlen($name)) == $category)
                return $p;
        }
        return $category == 'A' ? null : $this->getVAProduct();
    }

}
